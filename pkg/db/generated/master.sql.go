// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: master.sql

package generated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteMaster = `-- name: DeleteMaster :exec
DELETE FROM masters WHERE id = $1
`

func (q *Queries) DeleteMaster(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteMaster, id)
	return err
}

const getAllMasters = `-- name: GetAllMasters :many
SELECT id, address, grpc_address, hostname, last_seen, is_healthy FROM masters
`

func (q *Queries) GetAllMasters(ctx context.Context) ([]Master, error) {
	rows, err := q.db.Query(ctx, getAllMasters)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Master
	for rows.Next() {
		var i Master
		if err := rows.Scan(
			&i.ID,
			&i.Address,
			&i.GrpcAddress,
			&i.Hostname,
			&i.LastSeen,
			&i.IsHealthy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUnhealthyNodesWithControllers = `-- name: GetUnhealthyNodesWithControllers :many
SELECT n.id, n.address, n.grpc_address, n.hostname, n.last_seen, n.is_healthy, n.total_space, n.free_space, n.readonly, n.controller_master_id, m.address AS controller_master_address
FROM nodes n
LEFT JOIN masters m ON n.controller_master_id = m.id
WHERE n.is_healthy = false
`

type GetUnhealthyNodesWithControllersRow struct {
	ID                      pgtype.UUID
	Address                 string
	GrpcAddress             string
	Hostname                string
	LastSeen                pgtype.Timestamptz
	IsHealthy               pgtype.Bool
	TotalSpace              int64
	FreeSpace               int64
	Readonly                pgtype.Bool
	ControllerMasterID      pgtype.UUID
	ControllerMasterAddress pgtype.Text
}

func (q *Queries) GetUnhealthyNodesWithControllers(ctx context.Context) ([]GetUnhealthyNodesWithControllersRow, error) {
	rows, err := q.db.Query(ctx, getUnhealthyNodesWithControllers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUnhealthyNodesWithControllersRow
	for rows.Next() {
		var i GetUnhealthyNodesWithControllersRow
		if err := rows.Scan(
			&i.ID,
			&i.Address,
			&i.GrpcAddress,
			&i.Hostname,
			&i.LastSeen,
			&i.IsHealthy,
			&i.TotalSpace,
			&i.FreeSpace,
			&i.Readonly,
			&i.ControllerMasterID,
			&i.ControllerMasterAddress,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertMaster = `-- name: InsertMaster :exec
INSERT INTO masters (id, address, grpc_address, hostname, last_seen, is_healthy)
VALUES ($1, $2, $3, $4, NOW(), $5)
`

type InsertMasterParams struct {
	ID          pgtype.UUID
	Address     string
	GrpcAddress string
	Hostname    string
	IsHealthy   pgtype.Bool
}

func (q *Queries) InsertMaster(ctx context.Context, arg InsertMasterParams) error {
	_, err := q.db.Exec(ctx, insertMaster,
		arg.ID,
		arg.Address,
		arg.GrpcAddress,
		arg.Hostname,
		arg.IsHealthy,
	)
	return err
}

const updateMasterHealth = `-- name: UpdateMasterHealth :exec
UPDATE masters SET is_healthy = $2, last_seen = NOW() WHERE id = $1
`

type UpdateMasterHealthParams struct {
	ID        pgtype.UUID
	IsHealthy pgtype.Bool
}

func (q *Queries) UpdateMasterHealth(ctx context.Context, arg UpdateMasterHealthParams) error {
	_, err := q.db.Exec(ctx, updateMasterHealth, arg.ID, arg.IsHealthy)
	return err
}
