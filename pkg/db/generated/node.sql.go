// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: node.sql

package generated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteNode = `-- name: DeleteNode :exec
DELETE FROM nodes WHERE id = $1
`

func (q *Queries) DeleteNode(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteNode, id)
	return err
}

const getAllNodes = `-- name: GetAllNodes :many
SELECT id, address, grpc_address, hostname, last_seen, is_healthy, total_space, free_space, readonly, controller_master_id FROM nodes
`

func (q *Queries) GetAllNodes(ctx context.Context) ([]Node, error) {
	rows, err := q.db.Query(ctx, getAllNodes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Node
	for rows.Next() {
		var i Node
		if err := rows.Scan(
			&i.ID,
			&i.Address,
			&i.GrpcAddress,
			&i.Hostname,
			&i.LastSeen,
			&i.IsHealthy,
			&i.TotalSpace,
			&i.FreeSpace,
			&i.Readonly,
			&i.ControllerMasterID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHealthyNodes = `-- name: GetHealthyNodes :many
SELECT id, address, grpc_address, hostname, last_seen, is_healthy, total_space, free_space, readonly, controller_master_id FROM nodes WHERE is_healthy = true ORDER BY free_space DESC
`

func (q *Queries) GetHealthyNodes(ctx context.Context) ([]Node, error) {
	rows, err := q.db.Query(ctx, getHealthyNodes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Node
	for rows.Next() {
		var i Node
		if err := rows.Scan(
			&i.ID,
			&i.Address,
			&i.GrpcAddress,
			&i.Hostname,
			&i.LastSeen,
			&i.IsHealthy,
			&i.TotalSpace,
			&i.FreeSpace,
			&i.Readonly,
			&i.ControllerMasterID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNodeByID = `-- name: GetNodeByID :one
SELECT id, address, grpc_address, hostname, last_seen, is_healthy, total_space, free_space, readonly, controller_master_id FROM nodes WHERE id = $1
`

func (q *Queries) GetNodeByID(ctx context.Context, id pgtype.UUID) (Node, error) {
	row := q.db.QueryRow(ctx, getNodeByID, id)
	var i Node
	err := row.Scan(
		&i.ID,
		&i.Address,
		&i.GrpcAddress,
		&i.Hostname,
		&i.LastSeen,
		&i.IsHealthy,
		&i.TotalSpace,
		&i.FreeSpace,
		&i.Readonly,
		&i.ControllerMasterID,
	)
	return i, err
}

const insertNode = `-- name: InsertNode :one
INSERT INTO nodes (id, address, grpc_address, hostname, last_seen, is_healthy, total_space, free_space, readonly, controller_master_id)
VALUES ($1, $2, $3, $4, NOW(), $5, $6, $7, $8, NULL) RETURNING id, address, grpc_address, hostname, last_seen, is_healthy, total_space, free_space, readonly, controller_master_id
`

type InsertNodeParams struct {
	ID          pgtype.UUID
	Address     string
	GrpcAddress string
	Hostname    string
	IsHealthy   pgtype.Bool
	TotalSpace  int64
	FreeSpace   int64
	Readonly    pgtype.Bool
}

func (q *Queries) InsertNode(ctx context.Context, arg InsertNodeParams) (Node, error) {
	row := q.db.QueryRow(ctx, insertNode,
		arg.ID,
		arg.Address,
		arg.GrpcAddress,
		arg.Hostname,
		arg.IsHealthy,
		arg.TotalSpace,
		arg.FreeSpace,
		arg.Readonly,
	)
	var i Node
	err := row.Scan(
		&i.ID,
		&i.Address,
		&i.GrpcAddress,
		&i.Hostname,
		&i.LastSeen,
		&i.IsHealthy,
		&i.TotalSpace,
		&i.FreeSpace,
		&i.Readonly,
		&i.ControllerMasterID,
	)
	return i, err
}

const updateNodeControllerMaster = `-- name: UpdateNodeControllerMaster :exec
UPDATE nodes SET controller_master_id = $2 WHERE id = $1
`

type UpdateNodeControllerMasterParams struct {
	ID                 pgtype.UUID
	ControllerMasterID pgtype.UUID
}

func (q *Queries) UpdateNodeControllerMaster(ctx context.Context, arg UpdateNodeControllerMasterParams) error {
	_, err := q.db.Exec(ctx, updateNodeControllerMaster, arg.ID, arg.ControllerMasterID)
	return err
}

const updateNodeFreeSpace = `-- name: UpdateNodeFreeSpace :exec
UPDATE nodes SET free_space = $2 WHERE id = $1
`

type UpdateNodeFreeSpaceParams struct {
	ID        pgtype.UUID
	FreeSpace int64
}

func (q *Queries) UpdateNodeFreeSpace(ctx context.Context, arg UpdateNodeFreeSpaceParams) error {
	_, err := q.db.Exec(ctx, updateNodeFreeSpace, arg.ID, arg.FreeSpace)
	return err
}

const updateNodeHealth = `-- name: UpdateNodeHealth :exec
UPDATE nodes SET is_healthy = $2 WHERE id = $1
`

type UpdateNodeHealthParams struct {
	ID        pgtype.UUID
	IsHealthy pgtype.Bool
}

func (q *Queries) UpdateNodeHealth(ctx context.Context, arg UpdateNodeHealthParams) error {
	_, err := q.db.Exec(ctx, updateNodeHealth, arg.ID, arg.IsHealthy)
	return err
}
