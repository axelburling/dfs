// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: objects.sql

package generated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteObject = `-- name: DeleteObject :exec
DELETE FROM objects WHERE id = $1
`

func (q *Queries) DeleteObject(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteObject, id)
	return err
}

const getAllObjects = `-- name: GetAllObjects :many
SELECT id, name, total_size, total_chunks, content_type FROM objects ORDER BY name ASC
`

func (q *Queries) GetAllObjects(ctx context.Context) ([]Object, error) {
	rows, err := q.db.Query(ctx, getAllObjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Object
	for rows.Next() {
		var i Object
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.TotalSize,
			&i.TotalChunks,
			&i.ContentType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getObjectByID = `-- name: GetObjectByID :one
SELECT id, name, total_size, total_chunks, content_type FROM objects WHERE id = $1
`

func (q *Queries) GetObjectByID(ctx context.Context, id pgtype.UUID) (Object, error) {
	row := q.db.QueryRow(ctx, getObjectByID, id)
	var i Object
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.TotalSize,
		&i.TotalChunks,
		&i.ContentType,
	)
	return i, err
}

const getObjectByName = `-- name: GetObjectByName :one
SELECT id, name, total_size, total_chunks, content_type FROM objects WHERE name = $1
`

func (q *Queries) GetObjectByName(ctx context.Context, name string) (Object, error) {
	row := q.db.QueryRow(ctx, getObjectByName, name)
	var i Object
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.TotalSize,
		&i.TotalChunks,
		&i.ContentType,
	)
	return i, err
}

const insertObject = `-- name: InsertObject :one
INSERT INTO objects (name, total_size, total_chunks, content_type)
VALUES ($1, $2, $3, $4)
RETURNING id, name, total_size, total_chunks, content_type
`

type InsertObjectParams struct {
	Name        string
	TotalSize   int64
	TotalChunks int32
	ContentType string
}

func (q *Queries) InsertObject(ctx context.Context, arg InsertObjectParams) (Object, error) {
	row := q.db.QueryRow(ctx, insertObject,
		arg.Name,
		arg.TotalSize,
		arg.TotalChunks,
		arg.ContentType,
	)
	var i Object
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.TotalSize,
		&i.TotalChunks,
		&i.ContentType,
	)
	return i, err
}

const updateObjectSizeAndChunks = `-- name: UpdateObjectSizeAndChunks :exec
UPDATE objects
SET total_size = $2, total_chunks = $3
WHERE id = $1
`

type UpdateObjectSizeAndChunksParams struct {
	ID          pgtype.UUID
	TotalSize   int64
	TotalChunks int32
}

func (q *Queries) UpdateObjectSizeAndChunks(ctx context.Context, arg UpdateObjectSizeAndChunksParams) error {
	_, err := q.db.Exec(ctx, updateObjectSizeAndChunks, arg.ID, arg.TotalSize, arg.TotalChunks)
	return err
}
